datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  EDITOR
}

model User {
  id        String    @id @unique @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  username  String    @unique
  password  String
  avatar    String?
  bio       String?
  role      Role      @default(USER)
  blogs     Blog[]
  followers Follow[]  @relation("following")
  following Follow[]  @relation("follower")
  comments  Comment[]
  likes     Like[]
  saved     Saved[]
}

model Follow {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model Blog {
  id         String    @id @unique @default(uuid())
  title      String
  content    String
  categoryId String?
  userId     String
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes      Like[]
  comments   Comment[]
  saved      Saved[]
}

model Category {
  id    String @id @unique @default(uuid())
  name  String @unique
  blogs Blog[]
}

model Like {
  id     String @id @unique @default(uuid())
  blogId String
  userId String
  blog   Blog   @relation(fields: [blogId], references: [id])
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Comment {
  id      String @id @unique @default(uuid())
  blogId  String
  userId  String
  content String
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Saved {
  id     String @id @unique @default(uuid())
  userId String
  blogId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
